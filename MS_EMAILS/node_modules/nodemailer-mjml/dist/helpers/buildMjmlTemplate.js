"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMjmlTemplate = void 0;
const path_1 = require("path");
const promises_1 = require("fs/promises");
const mustache_1 = require("mustache");
const html_minifier_1 = require("html-minifier");
const mjml_1 = __importDefault(require("mjml"));
const defaultPluginOptions_1 = require("../constants/defaultPluginOptions");
const checkMjmlError_1 = require("../helpers/checkMjmlError");
const buildMjmlTemplate = async (options, templateName, templateData) => {
    const renderOptions = {
        ...defaultPluginOptions_1.defaultPluginOptions,
        ...options,
        mjmlOptions: {
            ...defaultPluginOptions_1.defaultPluginOptions.mjmlOptions,
            ...options.mjmlOptions
        }
    };
    const mjmlTemplatePath = (0, path_1.join)(options.templateFolder, `${templateName}.mjml`);
    const rawMjmlTemplate = await (0, promises_1.readFile)(mjmlTemplatePath, "utf-8").catch(() => {
        throw new Error(`[nodemailer-mjml] - Could not read mjml template at path: ${mjmlTemplatePath}`);
    });
    const shouldRunMustacheCompiler = !!templateData && Object.keys(templateData ?? {}).length > 0;
    const mustacheRenderedTemplate = shouldRunMustacheCompiler ? (0, mustache_1.render)(rawMjmlTemplate, templateData) : rawMjmlTemplate;
    const mjmlOutput = (0, mjml_1.default)(mustacheRenderedTemplate, {
        filePath: mjmlTemplatePath,
        ...renderOptions.mjmlOptions
    });
    (0, checkMjmlError_1.checkMjmlError)(mjmlOutput);
    const finalHtmlOutput = renderOptions.minifyHtmlOutput ? (0, html_minifier_1.minify)(mjmlOutput.html, renderOptions.htmlMinifierOptions) : mjmlOutput.html;
    return finalHtmlOutput;
};
exports.buildMjmlTemplate = buildMjmlTemplate;
